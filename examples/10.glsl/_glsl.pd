#N canvas 1980 98 668 783 10;
#X obj 118 339 glsl_vertex;
#X msg 72 338 print;
#X obj 118 626 glsl_program;
#X obj 193 545 pack 0 0;
#X msg 70 476 print;
#X msg 193 569 link \$1 \$2;
#X msg 72 620 print;
#X obj 118 490 glsl_fragment;
#X floatatom 193 525 2 0 0 0 ID - - 0;
#X floatatom 237 371 2 0 0 0 ID - - 0;
#X obj 211 590 print linking;
#X obj 118 21 inlet;
#X obj 118 662 outlet;
#X msg 167 309 open \$1.vert;
#X msg 194 453 open \$1.frag;
#X obj 577 95 inlet;
#X obj 118 192 t a;
#X floatatom 197 662 2 0 0 0 ID - - 0;
#X text 270 193 This abstraction can be useful to load a vertex+fragment shader. Shader location is relative to this abstraction path.;
#X obj 197 690 outlet programID;
#X obj 383 104 gemargs;
#X obj 383 68 loadbang;
#X obj 422 128 route bang;
#X obj 167 284 t a a;
#X obj 167 258 list prepend \$1;
#X obj 167 189 t b a;
#X obj 383 361 t a a;
#X obj 118 44 route bang symbol print;
#X msg 33 124 print;
#X obj 33 103 t b;
#X obj 33 145 t a a a;
#X connect 0 0 7 0;
#X connect 0 1 9 0;
#X connect 1 0 0 0;
#X connect 2 0 12 0;
#X connect 2 1 17 0;
#X connect 3 0 5 0;
#X connect 4 0 7 0;
#X connect 5 0 2 0;
#X connect 5 0 10 0;
#X connect 6 0 2 0;
#X connect 7 0 2 0;
#X connect 7 1 8 0;
#X connect 8 0 3 0;
#X connect 9 0 3 1;
#X connect 11 0 27 0;
#X connect 13 0 0 0;
#X connect 14 0 7 0;
#X connect 15 0 26 0;
#X connect 16 0 0 0;
#X connect 17 0 19 0;
#X connect 20 0 26 0;
#X connect 20 1 22 0;
#X connect 21 0 20 0;
#X connect 22 1 25 0;
#X connect 23 0 13 0;
#X connect 23 1 14 0;
#X connect 24 0 23 0;
#X connect 25 0 24 0;
#X connect 25 1 24 1;
#X connect 26 0 2 0;
#X connect 27 0 24 0;
#X connect 27 1 25 0;
#X connect 27 2 29 0;
#X connect 27 3 16 0;
#X connect 28 0 30 0;
#X connect 29 0 28 0;
#X connect 30 0 2 0;
#X connect 30 1 7 0;
#X connect 30 2 0 0;
